<?php
/**
 * @file
 * Code for the GSB Feature Book Content Type feature.
 */

include_once 'gsb_feature_book_ct.features.inc';

/**
 * Implements hook_form_FORM_ID_alter() for book node edit form.
 */
function gsb_feature_book_ct_form_book_node_form_alter(&$form, &$form_state) {
  
  $language = $form['language']['#value'];
  
  $form['title']['#description'] =
  'Include the edition in parentheses after the title. | <strong>Example:</strong> The Business of Sports: Text and Cases on Strategy and Management (4th edition)';

  // Add required field markers. The actual field validation is done in validate callback.
  if (!empty($form['field_program_unlimited'][$language])) {
    $form['field_program_unlimited'][$language]['#title'] .= " " . theme('form_required_marker');
  }

  // Hide alumni fields if the alumni checkbox is not checked.
  $form['field_program_unlimited']['#states']['invisible'][':input[name="field_alumni_story[' . $language . ']"]'] = array(
    array('checked' => FALSE),
  );

  // Perform additional validation.
  $form['#validate'][] = 'gsb_feature_book_ct_book_node_form_validate';
}

/**
 * Validate callback for book_node_form.
 *  - Conditionally validate alumni story fields.
 */
function gsb_feature_book_ct_book_node_form_validate($form, &$form_state) {
  $language = $form['language']['#value'];
  $values = $form_state['values'];

  // If Book is an alumni story we need to manually validate some required fields.
  if ($values['field_alumni_story'][$language][0]['value'] == TRUE) {

    if (empty($values['field_program_unlimited'][$language][0]['tid'])) {
      $field_label = $form['field_program_unlimited'][$language]['#title'];
      form_set_error('field_program_unlimited]['.$language.'][0][tid', $field_label . ' field is required.');
    }
  }
}

/**
 * Implements hook_field_collection_is_empty_alter().
 */
function gsb_feature_book_ct_field_collection_is_empty_alter(&$is_empty, $entity) {
  if (!$is_empty && $entity->field_name == 'field_book_url_pdf_unlimited') {
    // Mark the field as empty.
    $is_empty = TRUE;
    $wrapper = entity_metadata_wrapper('field_collection_item', $entity);
    // Iterate through the fields we care about.
    foreach (array('field_file_single_public', 'field_link_single', 'field_title') as $field_name) {
      // If any of these fields have a value, the field collection is not empty.
      if ($value = $wrapper->$field_name->value()) {
        $is_empty = FALSE;
        continue;
      }
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function gsb_feature_book_ct_node_presave($node) {

  // update the book's academic area
  if (empty($node->nid) && $node->type == 'book' && empty($node->field_academic_area_unlimited['und'])) {
    _gsb_feature_book_ct_modify_academic_area($node);
  }
}  

function _gsb_feature_book_ct_modify_academic_area(&$book_node) {

  // check if academic area is set
  // if academic area is not set we will try to use the author's academic area

  // get the entity wrapper for the node
  $ewrap_book = entity_metadata_wrapper('node', $book_node);

  // get the authors info
  $authors = $ewrap_book->field_authors->value();

  // get the first author and update the book

  $academic_area_tids = array();

  if (!empty($authors)) {
    foreach ($authors as $author) {
      if (!empty($author->field_person_fac_single_ref['und']) && !empty($author->field_person_fac_single_ref['und'][0]['target_id'])) {

        // get author's node id
        $author_nid = $author->field_person_fac_single_ref['und'][0]['target_id'];

        // load the author node
        $author_node = node_load($author_nid);

        // update the book with this author

        // get entity wrapper for the author node
        $ewrap_author = entity_metadata_wrapper('node', $author_node);

        // get the term for the author's academic area
        $academic_area = $ewrap_author->field_academic_area_single->value();

        if ($academic_area != null) {
          $tid = $academic_area->tid;
          $academic_area_tids[$tid] = $tid;
        }

      }
    }

    foreach($academic_area_tids as $tid) {
      $book_node->field_academic_area_unlimited['und'][] = array('tid' => $tid);
    }    

  }

}


